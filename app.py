import streamlit as st
import pandas as pd
import numpy as np
import joblib
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import openai
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import warnings

warnings.filterwarnings('ignore')

# È°µÈù¢ÈÖçÁΩÆ
st.set_page_config(
    page_title="üß≠ AI Career Compass",
    page_icon="üß≠",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Ëá™ÂÆö‰πâCSS
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        color: #2E86AB;
        margin-bottom: 2rem;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #A23B72;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 12px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
        height: 160px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        overflow: hidden;
    }
    .metric-card h2 {
        font-size: 1.5rem;
        margin: 0.5rem 0;
        word-wrap: break-word;
    }
    .metric-card h3 {
        font-size: 1rem;
        margin: 0.3rem 0;
    }
    .metric-card p {
        font-size: 0.9rem;
        margin: 0.2rem 0;
    }
    .metric-card small {
        font-size: 0.8rem;
    }
    .advice-card {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        margin: 1rem 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border-left: 4px solid #2E86AB;
        height: 150px;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
    }
    .advice-header {
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
        font-size: 1.2rem;
        font-weight: bold;
        color: #2E86AB;
    }
    .advice-content {
        color: #333;
        line-height: 1.6;
    }
    .skill-compact-row {
        background: #f8f9fa;
        padding: 0.75rem;
        border-radius: 8px;
        margin: 0.3rem 0;
        border: 1px solid #e0e0e0;
    }
    .skill-resource-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border: 1px solid #e0e0e0;
    }
    .skill-resource-card:hover {
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        transform: translateY(-2px);
        transition: all 0.3s ease;
    }
    .resource-link {
        color: #2E86AB;
        text-decoration: none;
        font-weight: 500;
    }
    .resource-link:hover {
        color: #A23B72;
    }
</style>
""", unsafe_allow_html=True)

# ÂàùÂßãÂåñsession state
if 'analysis_complete' not in st.session_state:
    st.session_state.analysis_complete = False
if 'user_profile' not in st.session_state:
    st.session_state.user_profile = {}
if 'skills_list' not in st.session_state:
    st.session_state.skills_list = [{"skill": "", "proficiency": 50} for _ in range(3)]

# È¢ÑÂÆö‰πâÁöÑÊäÄËÉΩÂàóË°®
PREDEFINED_SKILLS = [
    "Python", "SQL", "Machine Learning", "Deep Learning", "Data Analysis",
    "Statistics", "Pandas", "NumPy", "TensorFlow", "PyTorch", "Scikit-learn",
    "Tableau", "Power BI", "Excel", "R", "Java", "Spark", "Hadoop", "AWS",
    "Azure", "GCP", "Docker", "Kubernetes", "Git", "Linux", "NoSQL", "MongoDB",
    "PostgreSQL", "MySQL", "ETL", "Data Visualization", "Business Intelligence",
    "Natural Language Processing", "Computer Vision", "Time Series Analysis",
    "A/B Testing", "Statistical Modeling", "Neural Networks", "API Development",
    "Web Scraping", "Data Mining", "Big Data", "Cloud Computing", "MLOps"
]

# Â≠¶‰π†ËµÑÊ∫êÈìæÊé•
LEARNING_RESOURCES = {
    "Python": [
        {"name": "PythonÂÆòÊñπÊïôÁ®ã", "url": "https://docs.python.org/3/tutorial/", "type": "ÊñáÊ°£"},
        {"name": "Automate the Boring Stuff", "url": "https://automatetheboringstuff.com/", "type": "Âú®Á∫ø‰π¶Á±ç"},
        {"name": "Python for Everybody (Coursera)", "url": "https://www.coursera.org/specializations/python",
         "type": "ËØæÁ®ã"}
    ],
    "Machine Learning": [
        {"name": "Andrew Ng ML Course", "url": "https://www.coursera.org/learn/machine-learning", "type": "ËØæÁ®ã"},
        {"name": "Scikit-learn Documentation", "url": "https://scikit-learn.org/stable/user_guide.html",
         "type": "ÊñáÊ°£"},
        {"name": "Hands-On ML Book", "url": "https://github.com/ageron/handson-ml2", "type": "GitHub"}
    ],
    "Deep Learning": [
        {"name": "Deep Learning Specialization", "url": "https://www.coursera.org/specializations/deep-learning",
         "type": "ËØæÁ®ã"},
        {"name": "PyTorch Tutorials", "url": "https://pytorch.org/tutorials/", "type": "ÊñáÊ°£"},
        {"name": "TensorFlow Tutorials", "url": "https://www.tensorflow.org/tutorials", "type": "ÊñáÊ°£"}
    ],
    "SQL": [
        {"name": "SQLBolt Interactive Tutorial", "url": "https://sqlbolt.com/", "type": "‰∫íÂä®ÊïôÁ®ã"},
        {"name": "W3Schools SQL Tutorial", "url": "https://www.w3schools.com/sql/", "type": "ÊïôÁ®ã"},
        {"name": "PostgreSQL Tutorial", "url": "https://www.postgresqltutorial.com/", "type": "ÊïôÁ®ã"}
    ],
    "Data Analysis": [
        {"name": "Pandas Documentation", "url": "https://pandas.pydata.org/docs/user_guide/index.html", "type": "ÊñáÊ°£"},
        {"name": "Data Analysis with Python", "url": "https://www.coursera.org/learn/data-analysis-with-python",
         "type": "ËØæÁ®ã"},
        {"name": "Kaggle Learn", "url": "https://www.kaggle.com/learn", "type": "ÂÆûÊàòÂπ≥Âè∞"}
    ],
    "Cloud Computing": [
        {"name": "AWS Training", "url": "https://aws.amazon.com/training/", "type": "ÂÆòÊñπÂüπËÆ≠"},
        {"name": "Azure Learning Path", "url": "https://docs.microsoft.com/en-us/learn/azure/", "type": "Â≠¶‰π†Ë∑ØÂæÑ"},
        {"name": "GCP Training", "url": "https://cloud.google.com/training", "type": "ÂÆòÊñπÂüπËÆ≠"}
    ],
    "MLOps": [
        {"name": "MLOps Specialization",
         "url": "https://www.coursera.org/specializations/machine-learning-engineering-for-production-mlops",
         "type": "ËØæÁ®ã"},
        {"name": "MLflow Documentation", "url": "https://mlflow.org/docs/latest/index.html", "type": "ÊñáÊ°£"},
        {"name": "Kubeflow Tutorials", "url": "https://www.kubeflow.org/docs/started/getting-started/", "type": "ÊïôÁ®ã"}
    ]
}

# Â≠¶Ê†°Á±ªÂûãÊùÉÈáçÈÖçÁΩÆ
SCHOOL_WEIGHTS = {
    "985/QS Top 50": 1.2,
    "211/QS Top 200": 1.05,
    "ÂÖ∂‰ªñ": 1.0
}

# Ë°å‰∏öÊùÉÈáçÈÖçÁΩÆ
INDUSTRY_WEIGHTS = {
    "Technology": 1.1,
    "Finance": 1.2,
    "Healthcare": 1.0,
    "Media": 0.9,
    "Retail": 0.8,
    "Energy": 0.95,
    "ÂÖ∂‰ªñ": 1.0
}


# Âä†ËΩΩÊ®°ÂûãÂíåÁºñÁ†ÅÂô®
@st.cache_resource
def load_models():
    try:
        salary_model = joblib.load('salary_prediction_model.pkl')
        label_encoders = joblib.load('label_encoders.pkl')
        return salary_model, label_encoders
    except FileNotFoundError:
        st.error("Ê®°ÂûãÊñá‰ª∂Êú™ÊâæÂà∞ÔºåËØ∑Á°Æ‰øùÊ®°ÂûãÊñá‰ª∂Âú®Ê≠£Á°ÆË∑ØÂæÑ")
        return None, None


# ÊîπËøõÁöÑÊäÄËÉΩËÅöÁ±ªÂáΩÊï∞
def analyze_skills_cluster(skills_data):
    """Âü∫‰∫éÊäÄËÉΩÁªÑÂêàÂíåÁÜüÁªÉÂ∫¶ËøõË°åËÅöÁ±ªÂàÜÊûê"""
    if not skills_data or not any(skill['skill'] for skill in skills_data):
        return "ÈÄöÁî®Âûã‰∫∫Êâç", []

    # ÂÆö‰πâËÅå‰∏öÁ±ªÂûãÁöÑÊäÄËÉΩÁâπÂæÅ
    skill_patterns = {
        "Êï∞ÊçÆÁßëÂ≠¶‰∏ìÂÆ∂": {
            "core_skills": ["python", "machine learning", "statistics", "data analysis"],
            "bonus_skills": ["pandas", "numpy", "scikit-learn", "jupyter"],
            "min_core_count": 2,  # Ëá≥Â∞ëÈúÄË¶Å2‰∏™Ê†∏ÂøÉÊäÄËÉΩ
            "weight_factor": 1.0
        },
        "AIÂ∑•Á®ãÂ∏à": {
            "core_skills": ["deep learning", "tensorflow", "pytorch", "neural networks"],
            "bonus_skills": ["computer vision", "nlp", "python", "machine learning"],
            "min_core_count": 2,
            "weight_factor": 1.1
        },
        "Êï∞ÊçÆÂ∑•Á®ãÂ∏à": {
            "core_skills": ["sql", "spark", "hadoop", "etl"],
            "bonus_skills": ["aws", "azure", "docker", "kubernetes", "python"],
            "min_core_count": 2,
            "weight_factor": 1.05
        },
        "ÂïÜ‰∏öÂàÜÊûêÂ∏à": {
            "core_skills": ["excel", "tableau", "power bi", "business intelligence"],
            "bonus_skills": ["sql", "analytics", "data visualization"],
            "min_core_count": 1,
            "weight_factor": 0.95
        }
    }

    user_skills = []
    total_proficiency = 0

    # ÊèêÂèñÁî®Êà∑ÊäÄËÉΩÂíåÁÜüÁªÉÂ∫¶
    for skill_item in skills_data:
        if skill_item['skill']:
            skill_lower = skill_item['skill'].lower()
            proficiency = skill_item['proficiency']
            user_skills.append((skill_lower, proficiency))
            total_proficiency += proficiency

    if not user_skills:
        return "ÈÄöÁî®Âûã‰∫∫Êâç", PREDEFINED_SKILLS[:5]

    # ËÆ°ÁÆóÊØè‰∏™ËÅå‰∏öÁ±ªÂûãÁöÑÂåπÈÖçÂàÜÊï∞
    cluster_scores = {}

    for cluster_name, pattern in skill_patterns.items():
        core_matches = 0
        core_proficiency_sum = 0
        bonus_score = 0

        # Ê£ÄÊü•Ê†∏ÂøÉÊäÄËÉΩÂåπÈÖç
        for skill_lower, proficiency in user_skills:
            for core_skill in pattern["core_skills"]:
                if core_skill in skill_lower:
                    core_matches += 1
                    core_proficiency_sum += proficiency
                    break

            # Ê£ÄÊü•Â•ñÂä±ÊäÄËÉΩ
            for bonus_skill in pattern["bonus_skills"]:
                if bonus_skill in skill_lower:
                    bonus_score += proficiency * 0.5
                    break

        # Âè™ÊúâÊª°Ë∂≥ÊúÄÂ∞ëÊ†∏ÂøÉÊäÄËÉΩÊï∞ÈáèË¶ÅÊ±ÇÊâçËÄÉËôëËØ•ËÅå‰∏öÁ±ªÂûã
        if core_matches >= pattern["min_core_count"]:
            # ËÆ°ÁÆóÁªºÂêàÂàÜÊï∞
            core_score = (core_proficiency_sum / max(core_matches, 1)) * core_matches
            total_score = (core_score + bonus_score) * pattern["weight_factor"]
            cluster_scores[cluster_name] = total_score
        else:
            cluster_scores[cluster_name] = 0

    # Â¶ÇÊûúÊ≤°ÊúâÊòéÁ°ÆÁöÑËÅå‰∏öÁ±ªÂûãÂåπÈÖçÔºåËøîÂõûÈÄöÁî®Âûã
    if not cluster_scores or max(cluster_scores.values()) == 0:
        return "ÈÄöÁî®Âûã‰∫∫Êâç", PREDEFINED_SKILLS[:5]

    # ËøîÂõûÂæóÂàÜÊúÄÈ´òÁöÑËÅå‰∏öÁ±ªÂûã
    best_cluster = max(cluster_scores, key=cluster_scores.get)
    recommended_skills = (skill_patterns[best_cluster]["core_skills"] +
                          skill_patterns[best_cluster]["bonus_skills"])[:5]

    return best_cluster, recommended_skills


# Ëñ™ËµÑÈ¢ÑÊµãÂáΩÊï∞
def predict_salary(user_data, skills_data, salary_model, label_encoders):
    """Âü∫‰∫éÁî®Êà∑Êï∞ÊçÆÈ¢ÑÊµãËñ™ËµÑÔºåÂåÖÂê´Â≠¶Ê†°ÂíåÊäÄËÉΩÊùÉÈáç"""
    if not salary_model or not label_encoders:
        base_salary = calculate_base_salary(user_data, skills_data)
        return base_salary, base_salary * 0.85, base_salary * 1.15

    try:
        base_salary = calculate_base_salary(user_data, skills_data)

        # Â∫îÁî®Â≠¶Ê†°ÊùÉÈáç
        school_weight = SCHOOL_WEIGHTS.get(user_data.get('school_tier', 'ÂÖ∂‰ªñ'), 1.0)

        # Â∫îÁî®Ë°å‰∏öÊùÉÈáç
        industry_weight = INDUSTRY_WEIGHTS.get(user_data.get('industry', 'ÂÖ∂‰ªñ'), 1.0)

        # ËÆ°ÁÆóÊäÄËÉΩÊùÉÈáç
        skill_weight = calculate_skill_weight(skills_data)

        # ÁªºÂêàËÆ°ÁÆó
        predicted_salary = base_salary * school_weight * industry_weight * skill_weight

        # ËÆ°ÁÆóÁΩÆ‰ø°Âå∫Èó¥
        lower_bound = predicted_salary * 0.85
        upper_bound = predicted_salary * 1.15

        return predicted_salary, lower_bound, upper_bound

    except Exception as e:
        st.error(f"È¢ÑÊµãËøáÁ®ã‰∏≠Âá∫Áé∞ÈîôËØØ: {str(e)}")
        base_salary = calculate_base_salary(user_data, skills_data)
        return base_salary, base_salary * 0.85, base_salary * 1.15


def calculate_base_salary(user_data, skills_data):
    """ËÆ°ÁÆóÂü∫Á°ÄËñ™ËµÑ"""
    base_salaries = {
        "ÂÖ•Èó®Á∫ß (0-2Âπ¥)": 70000,
        "‰∏≠Á∫ß (2-5Âπ¥)": 95000,
        "È´òÁ∫ß (5-10Âπ¥)": 130000,
        "‰∏ìÂÆ∂Á∫ß (10Âπ¥‰ª•‰∏ä)": 180000
    }

    experience_level = user_data.get('experience_level', '‰∏≠Á∫ß (2-5Âπ¥)')
    base = base_salaries.get(experience_level, 95000)

    # Âú∞Âå∫Ë∞ÉÊï¥
    location_multipliers = {
        "United States": 1.0, "United Kingdom": 0.8, "Canada": 0.85,
        "Germany": 0.75, "Netherlands": 0.8, "China": 0.6, "Singapore": 0.9
    }

    location = user_data.get('company_location', 'United States')
    base *= location_multipliers.get(location, 0.8)

    # ÂÖ¨Âè∏ËßÑÊ®°Ë∞ÉÊï¥
    size_multipliers = {
        "Â∞èÂûãÂÖ¨Âè∏ (<50‰∫∫)": 0.9, "‰∏≠ÂûãÂÖ¨Âè∏ (50-250‰∫∫)": 1.0, "Â§ßÂûãÂÖ¨Âè∏ (>250‰∫∫)": 1.15
    }

    company_size = user_data.get('company_size', '‰∏≠ÂûãÂÖ¨Âè∏ (50-250‰∫∫)')
    base *= size_multipliers.get(company_size, 1.0)

    # ËøúÁ®ãÂ∑•‰ΩúË∞ÉÊï¥
    remote_multipliers = {
        "0% (ÂÆåÂÖ®Áé∞Âú∫ÂäûÂÖ¨)": 1.0, "25% (ÂÅ∂Â∞îËøúÁ®ã)": 1.02, "50% (Ê∑∑ÂêàÂäûÂÖ¨)": 1.05,
        "75% (‰∏ªË¶ÅËøúÁ®ã)": 1.08, "100% (ÂÆåÂÖ®ËøúÁ®ã)": 1.1
    }

    remote_ratio = user_data.get('remote_ratio', '50% (Ê∑∑ÂêàÂäûÂÖ¨)')
    base *= remote_multipliers.get(remote_ratio, 1.0)

    return int(base)


def calculate_skill_weight(skills_data):
    """Ê†πÊçÆÊäÄËÉΩÊï∞ÈáèÂíåÁÜüÁªÉÂ∫¶ËÆ°ÁÆóÊùÉÈáç"""
    if not skills_data:
        return 1.0

    total_score = 0
    skill_count = 0

    for skill_item in skills_data:
        if skill_item['skill']:
            proficiency = skill_item['proficiency']
            total_score += proficiency
            skill_count += 1

    if skill_count == 0:
        return 1.0

    avg_proficiency = total_score / skill_count
    skill_weight = 0.8 + (avg_proficiency / 100) * 0.4
    skill_count_bonus = min(skill_count * 0.02, 0.1)

    return skill_weight + skill_count_bonus


# ÁîüÊàêËÅå‰∏öÂª∫ËÆÆ
def generate_career_advice(user_profile, cluster_type, salary_range, skills_data):
    """ÁîüÊàê‰∏™ÊÄßÂåñËÅå‰∏öÂª∫ËÆÆ"""
    advice_templates = {
        "Êï∞ÊçÆÁßëÂ≠¶‰∏ìÂÆ∂": {
            "strengths": "‰Ω†Âú®Êï∞ÊçÆÂàÜÊûêÂíåÊú∫Âô®Â≠¶‰π†ÊñπÈù¢ÊúâÂæàÂ•ΩÁöÑÂü∫Á°Ä",
            "gaps": "Âª∫ËÆÆÂä†Âº∫Ê∑±Â∫¶Â≠¶‰π†ÂíåÂ§ßÊï∞ÊçÆÂ§ÑÁêÜÊäÄËÉΩ",
            "next_steps": "ËÄÉËôëÂ≠¶‰π†TensorFlow/PyTorchÔºåËé∑ÂæóAWSËÆ§ËØÅ",
            "icon": "üìä"
        },
        "AIÂ∑•Á®ãÂ∏à": {
            "strengths": "‰Ω†Âú®AIÊäÄÊúØÊ†àÊñπÈù¢ÊúâÂæàÂº∫ÁöÑÊäÄÊúØËÉΩÂäõ",
            "gaps": "Âª∫ËÆÆÂä†Âº∫‰∫ßÂìÅÂåñÂíåÂ∑•Á®ãÂÆûË∑µÁªèÈ™å",
            "next_steps": "ÂèÇ‰∏éÂºÄÊ∫êÈ°πÁõÆÔºåÂ≠¶‰π†MLOpsÂíåÊ®°ÂûãÈÉ®ÁΩ≤",
            "icon": "ü§ñ"
        },
        "Êï∞ÊçÆÂ∑•Á®ãÂ∏à": {
            "strengths": "‰Ω†Âú®Êï∞ÊçÆÂü∫Á°ÄËÆæÊñΩÊñπÈù¢ÊúâÂæàÂ•ΩÁöÑÊäÄËÉΩ",
            "gaps": "Âª∫ËÆÆÂ≠¶‰π†Êõ¥Â§ö‰∫ëÂπ≥Âè∞ÂíåÂÆûÊó∂Êï∞ÊçÆÂ§ÑÁêÜÊäÄÊúØ",
            "next_steps": "Ê∑±ÂÖ•Â≠¶‰π†Kafka„ÄÅKubernetesÁ≠âÊäÄÊúØ",
            "icon": "üîß"
        },
        "ÂïÜ‰∏öÂàÜÊûêÂ∏à": {
            "strengths": "‰Ω†Âú®‰∏öÂä°ÁêÜËß£ÂíåÊï∞ÊçÆÂèØËßÜÂåñÊñπÈù¢ÂæàÊúâ‰ºòÂäø",
            "gaps": "Âª∫ËÆÆÂä†Âº∫ÁºñÁ®ãÊäÄËÉΩÂíåÁªüËÆ°ÂàÜÊûêËÉΩÂäõ",
            "next_steps": "Â≠¶‰π†Python/RÔºåÊéåÊè°È´òÁ∫ßÂàÜÊûêÊñπÊ≥ï",
            "icon": "üìà"
        },
        "ÈÄöÁî®Âûã‰∫∫Êâç": {
            "strengths": "‰Ω†ÂÖ∑Â§áÂ§öÊñπÈù¢ÁöÑÊäÄËÉΩÂü∫Á°Ä",
            "gaps": "Âª∫ËÆÆ‰∏ìÊ≥®Êüê‰∏™ÁªÜÂàÜÈ¢ÜÂüüÊ∑±ÂÖ•ÂèëÂ±ï",
            "next_steps": "ÈÄâÊã©ÊÑüÂÖ¥Ë∂£ÁöÑÊñπÂêëÔºåÁ≥ªÁªüÊÄßÊèêÂçá‰∏ì‰∏öÊäÄËÉΩ",
            "icon": "üéØ"
        }
    }

    template = advice_templates.get(cluster_type, advice_templates["ÈÄöÁî®Âûã‰∫∫Êâç"])

    return template


# Á¥ßÂáëÂûãÊäÄËÉΩËæìÂÖ•ÁªÑ‰ª∂
def skill_input_component():
    """Á¥ßÂáëÂûãÊäÄËÉΩËæìÂÖ•ÁªÑ‰ª∂"""
    with st.expander("üéØ ÊäÄËÉΩËÉåÊôØÈÖçÁΩÆ", expanded=True):
        st.write("ÈÄâÊã©‰Ω†ÁöÑÊäÄËÉΩÂπ∂ËØÑ‰º∞ÁÜüÁªÉÁ®ãÂ∫¶Ôºö")

        # Ê∑ªÂä†ÊäÄËÉΩÊåâÈíÆ
        if st.button("‚ûï Ê∑ªÂä†ÊäÄËÉΩ", key="add_skill_btn"):
            st.session_state.skills_list.append({"skill": "", "proficiency": 50})
            st.rerun()

        # ÊäÄËÉΩËæìÂÖ•Ë°åÔºàÁ¥ßÂáëÂ∏ÉÂ±ÄÔºâ
        skills_to_remove = []
        for i, skill_item in enumerate(st.session_state.skills_list):
            with st.container():
                st.markdown(f'<div class="skill-compact-row">', unsafe_allow_html=True)

                col1, col2, col3 = st.columns([4, 3, 1])

                with col1:
                    skill_options = [""] + PREDEFINED_SKILLS + ["Ëá™ÂÆö‰πâ..."]
                    current_skill = skill_item.get('skill', '')

                    if current_skill and current_skill not in PREDEFINED_SKILLS:
                        skill_options.insert(-1, current_skill)

                    selected_skill = st.selectbox(
                        f"ÊäÄËÉΩ {i + 1}",
                        options=skill_options,
                        index=skill_options.index(current_skill) if current_skill in skill_options else 0,
                        key=f"skill_{i}",
                        label_visibility="collapsed"
                    )

                    if selected_skill == "Ëá™ÂÆö‰πâ...":
                        custom_skill = st.text_input(
                            "",
                            value=current_skill if current_skill not in PREDEFINED_SKILLS else "",
                            key=f"custom_skill_{i}",
                            placeholder="ËæìÂÖ•Ëá™ÂÆö‰πâÊäÄËÉΩ"
                        )
                        st.session_state.skills_list[i]['skill'] = custom_skill
                    else:
                        st.session_state.skills_list[i]['skill'] = selected_skill

                with col2:
                    proficiency = st.slider(
                        "ÁÜüÁªÉÁ®ãÂ∫¶",
                        min_value=0,
                        max_value=100,
                        value=skill_item.get('proficiency', 50),
                        step=5,
                        key=f"proficiency_{i}",
                        label_visibility="collapsed"
                    )
                    st.session_state.skills_list[i]['proficiency'] = proficiency

                with col3:
                    if len(st.session_state.skills_list) > 1:
                        if st.button("üóëÔ∏è", key=f"remove_{i}", help="Âà†Èô§ÊäÄËÉΩ"):
                            skills_to_remove.append(i)

                st.markdown('</div>', unsafe_allow_html=True)

        # ÁßªÈô§Ê†áËÆ∞ÁöÑÊäÄËÉΩ
        for i in reversed(skills_to_remove):
            st.session_state.skills_list.pop(i)
            st.rerun()


# ÊòæÁ§∫Â≠¶‰π†ËµÑÊ∫ê
def display_learning_resources(skills):
    """ÊòæÁ§∫Â≠¶‰π†ËµÑÊ∫êÂç°Áâá"""
    st.markdown('<div class="sub-header">üéì Êé®ËçêÂ≠¶‰π†ÊäÄËÉΩ‰∏éËµÑÊ∫ê</div>', unsafe_allow_html=True)

    # Á°Æ‰øùËá≥Â∞ëÊòæÁ§∫4‰∏™ÊäÄËÉΩÁöÑÂ≠¶‰π†ËµÑÊ∫ê
    display_skills = []

    # ‰ºòÂÖàÊòæÁ§∫Êé®ËçêÊäÄËÉΩ‰∏≠ÊúâËµÑÊ∫êÁöÑÊäÄËÉΩ
    for skill in skills:
        if skill.title() in LEARNING_RESOURCES:  # Â§ÑÁêÜÂ§ßÂ∞èÂÜôÈóÆÈ¢ò
            display_skills.append(skill.title())
        elif skill.lower() in [k.lower() for k in LEARNING_RESOURCES.keys()]:
            # Êü•ÊâæÂ§ßÂ∞èÂÜô‰∏çÊïèÊÑüÁöÑÂåπÈÖç
            for resource_key in LEARNING_RESOURCES.keys():
                if skill.lower() == resource_key.lower():
                    display_skills.append(resource_key)
                    break

    # Â¶ÇÊûúÊé®ËçêÊäÄËÉΩ‰∏≠ÁöÑËµÑÊ∫ê‰∏çË∂≥4‰∏™ÔºåË°•ÂÖÖÁÉ≠Èó®ÊäÄËÉΩ
    popular_skills = ["Python", "Machine Learning", "SQL", "Data Analysis", "Deep Learning", "Cloud Computing"]
    for skill in popular_skills:
        if len(display_skills) >= 4:
            break
        if skill not in display_skills:
            display_skills.append(skill)

    # Á°Æ‰øùËá≥Â∞ëÊúâ4‰∏™ÊäÄËÉΩÊòæÁ§∫
    if len(display_skills) < 4:
        display_skills = ["Python", "Machine Learning", "SQL", "Data Analysis"]

    # ÊòæÁ§∫Ââç4‰∏™ÊäÄËÉΩÁöÑÂ≠¶‰π†ËµÑÊ∫ê
    for skill in display_skills[:4]:
        if skill in LEARNING_RESOURCES:
            st.markdown(f"### üìö {skill}")
            cols = st.columns(len(LEARNING_RESOURCES[skill]))

            for i, resource in enumerate(LEARNING_RESOURCES[skill]):
                with cols[i]:
                    st.markdown(f"""
                    <div class="skill-resource-card">
                        <a href="{resource['url']}" target="_blank" class="resource-link">
                            <strong>{resource['name']}</strong>
                        </a>
                        <br><small>{resource['type']}</small>
                    </div>
                    """, unsafe_allow_html=True)
        else:
            # Â¶ÇÊûúÊ≤°ÊúâÂÖ∑‰ΩìËµÑÊ∫êÔºåÊòæÁ§∫ÈÄöÁî®Â≠¶‰π†Âª∫ËÆÆ
            st.markdown(f"### üìö {skill}")
            st.markdown(f"""
            <div class="skill-resource-card">
                <strong>Êé®ËçêÂ≠¶‰π† {skill}</strong><br>
                <small>Âª∫ËÆÆÈÄöËøáÂú®Á∫øËØæÁ®ã„ÄÅÂÆòÊñπÊñáÊ°£ÂíåÂÆûÊàòÈ°πÁõÆÊù•Â≠¶‰π†</small>
            </div>
            """, unsafe_allow_html=True)


# ‰∏ªÁïåÈù¢
def main():
    st.markdown('<div class="main-header">üß≠ AI Career Compass</div>', unsafe_allow_html=True)
    st.markdown(
        '<div style="text-align: center; color: #666; font-size: 1.2rem; margin-bottom: 3rem;">AIÊ±ÇËÅåÂä©ÊâãÔºöÊäÄËÉΩÁîªÂÉè„ÄÅËñ™ËµÑÈ¢ÑÊµã„ÄÅÊàêÈïøÂª∫ËÆÆ</div>',
        unsafe_allow_html=True)

    # Âä†ËΩΩÊ®°Âûã
    salary_model, label_encoders = load_models()

    # ‰æßËæπÊ†èÔºöÁî®Êà∑ËæìÂÖ•
    with st.sidebar:
        st.header("üìù ‰∏™‰∫∫‰ø°ÊÅØËæìÂÖ•")

        # Âü∫Êú¨‰ø°ÊÅØ
        st.subheader("Âü∫Êú¨ËÉåÊôØ")
        years_experience = st.slider("Â∑•‰ΩúÁªèÈ™åÂπ¥Èôê", 0, 15, 3)

        education_level = st.selectbox("Â≠¶ÂéÜÊ∞¥Âπ≥", ["Bachelor", "Master", "PhD"])
        school_tier = st.selectbox("Â≠¶Ê†°Â±ÇÊ¨°", ["985/QS Top 50", "211/QS Top 200", "ÂÖ∂‰ªñ"])

        # Ê±ÇËÅåÂÅèÂ•Ω
        st.subheader("Ê±ÇËÅåÂÅèÂ•Ω")
        experience_level = st.selectbox("ÁªèÈ™åÁ∫ßÂà´",
                                        ["ÂÖ•Èó®Á∫ß (0-2Âπ¥)", "‰∏≠Á∫ß (2-5Âπ¥)", "È´òÁ∫ß (5-10Âπ¥)", "‰∏ìÂÆ∂Á∫ß (10Âπ¥‰ª•‰∏ä)"])
        employment_type = st.selectbox("Â∑•‰ΩúÁ±ªÂûã", ["ÂÖ®ËÅå", "ÂÖºËÅå", "ÂêàÂêåÂ∑•", "Ëá™Áî±ËÅå‰∏ö"])
        company_location = st.selectbox("ÂÖ¨Âè∏‰ΩçÁΩÆ",
                                        ["United States", "United Kingdom", "Canada", "Germany", "Netherlands", "China",
                                         "Singapore", "Other"])
        company_size = st.selectbox("ÂÖ¨Âè∏ËßÑÊ®°", ["Â∞èÂûãÂÖ¨Âè∏ (<50‰∫∫)", "‰∏≠ÂûãÂÖ¨Âè∏ (50-250‰∫∫)", "Â§ßÂûãÂÖ¨Âè∏ (>250‰∫∫)"])
        remote_ratio = st.selectbox("ËøúÁ®ãÂ∑•‰ΩúÊØî‰æã",
                                    ["0% (ÂÆåÂÖ®Áé∞Âú∫ÂäûÂÖ¨)", "25% (ÂÅ∂Â∞îËøúÁ®ã)", "50% (Ê∑∑ÂêàÂäûÂÖ¨)", "75% (‰∏ªË¶ÅËøúÁ®ã)",
                                     "100% (ÂÆåÂÖ®ËøúÁ®ã)"])
        industry = st.selectbox("Ë°å‰∏ö", ["Technology", "Finance", "Healthcare", "Media", "Retail", "Energy", "ÂÖ∂‰ªñ"])

        # ÂàÜÊûêÊåâÈíÆ
        if st.button("üöÄ ÂºÄÂßãÂàÜÊûê", type="primary"):
            st.session_state.user_profile = {
                'years_experience': years_experience,
                'education_required': education_level,
                'school_tier': school_tier,
                'experience_level': experience_level,
                'employment_type': employment_type,
                'company_location': company_location,
                'employee_residence': company_location,
                'company_size': company_size,
                'remote_ratio': remote_ratio,
                'industry': industry
            }
            st.session_state.analysis_complete = True
            st.rerun()

    # ‰∏ªÈ°µÈù¢ÂÜÖÂÆπ
    if not st.session_state.analysis_complete:
        # ÊäÄËÉΩËæìÂÖ•ÁïåÈù¢ÔºàÁ¥ßÂáëÁâàÔºâ
        skill_input_component()

        # Ê¨¢Ëøé‰ø°ÊÅØ
        st.markdown("""
        ## üöÄ ÂºÄÂßã‰Ω†ÁöÑAIËÅå‰∏öÂàÜÊûê

        Â°´ÂÜôÂ∑¶‰æßÁöÑÂü∫Êú¨‰ø°ÊÅØÂíå‰∏äÊñπÁöÑÊäÄËÉΩËÉåÊôØÔºåÊàë‰ª¨Â∞Ü‰∏∫‰Ω†Êèê‰æõÔºö

        - üéØ **Êô∫ËÉΩËÅå‰∏öÂàÜÁ±ª** - Âü∫‰∫éÊäÄËÉΩÁªÑÂêàÁöÑ‰∏ì‰∏öËÅöÁ±ªÂàÜÊûê
        - üí∞ **Á≤æÂáÜËñ™ËµÑÈ¢ÑÊµã** - ËÄÉËôëÂ≠¶Ê†°ËÉåÊôØ„ÄÅÊäÄËÉΩÁÜüÁªÉÂ∫¶ÁöÑËñ™ËµÑÊ®°Âûã
        - üìä **ÂèØËßÜÂåñÊäÄËÉΩÁîªÂÉè** - Èõ∑ËææÂõæÂ±ïÁ§∫‰Ω†ÁöÑÊäÄËÉΩÂàÜÂ∏É
        - üß† **‰∏™ÊÄßÂåñËÅå‰∏öÂª∫ËÆÆ** - AIÈ©±Âä®ÁöÑÂèëÂ±ïÂª∫ËÆÆ
        - üéì **Â≠¶‰π†ËµÑÊ∫êÊé®Ëçê** - Á≤æÈÄâÁöÑÊäÄËÉΩÊèêÂçáËµÑÊ∫êÈìæÊé•
        """)

    else:
        # ÁªìÊûúÂ±ïÁ§∫È°µÈù¢
        profile = st.session_state.user_profile
        skills_data = st.session_state.skills_list

        # ÊäÄËÉΩËÅöÁ±ªÂàÜÊûê
        cluster_type, recommended_skills = analyze_skills_cluster(skills_data)

        # Ëñ™ËµÑÈ¢ÑÊµã
        predicted_salary, lower_bound, upper_bound = predict_salary(profile, skills_data, salary_model, label_encoders)

        # ‰∏â‰∏™Á≠âÂÆΩÊåáÊ†áÂç°Áâá
        col1, col2, col3 = st.columns(3)

        with col1:
            st.markdown(f"""
            <div class="metric-card">
                <h3>üë§ ËÅå‰∏öÁ±ªÂûã</h3>
                <h2>{cluster_type}</h2>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            st.markdown(f"""
            <div class="metric-card">
                <h3>üí∞ È¢ÑÊµãËñ™ËµÑ</h3>
                <h2>${predicted_salary:,.0f}</h2>
                <p>${lower_bound:,.0f} - ${upper_bound:,.0f}</p>
            </div>
            """, unsafe_allow_html=True)

        with col3:
            school_display = profile.get('school_tier', 'ÂÖ∂‰ªñ')
            weight_info = f"ÊùÉÈáç: {SCHOOL_WEIGHTS.get(school_display, 1.0):.2f}"
            st.markdown(f"""
            <div class="metric-card">
                <h3>üéì Â≠¶ÂéÜËÉåÊôØ</h3>
                <h2>{profile['education_required']}</h2>
                <p>{school_display}</p>
                <small>{weight_info}</small>
            </div>
            """, unsafe_allow_html=True)

        # ËØ¶ÁªÜÂàÜÊûê
        st.markdown('<div class="sub-header">üìä ËØ¶ÁªÜÂàÜÊûê</div>', unsafe_allow_html=True)

        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üéØ ÊäÄËÉΩÁîªÂÉè")

            # ÊÅ¢Â§çÈõ∑ËææÂõæÊòæÁ§∫
            if skills_data and any(skill['skill'] for skill in skills_data):
                # ÂàõÂª∫Èõ∑ËææÂõæÊï∞ÊçÆ
                skills_dict = {}
                for skill_item in skills_data:
                    if skill_item['skill']:
                        skills_dict[skill_item['skill']] = skill_item['proficiency']

                # Ë°•ÂÖÖÂ∏∏ËßÅÊäÄËÉΩÁª¥Â∫¶
                radar_skills = ['Programming', 'Machine Learning', 'Data Analysis', 'Statistics', 'Communication',
                                'Domain Knowledge']
                radar_values = []

                for radar_skill in radar_skills:
                    # Ê†πÊçÆÁî®Êà∑ÊäÄËÉΩÂåπÈÖçËÆ°ÁÆóÂàÜÊï∞
                    score = 0
                    if radar_skill == 'Programming':
                        prog_skills = ['Python', 'R', 'Java', 'SQL']
                        score = max([skills_dict.get(skill, 0) for skill in prog_skills] + [0])
                    elif radar_skill == 'Machine Learning':
                        ml_skills = ['Machine Learning', 'Deep Learning', 'TensorFlow', 'PyTorch']
                        score = max([skills_dict.get(skill, 0) for skill in ml_skills] + [0])
                    elif radar_skill == 'Data Analysis':
                        da_skills = ['Data Analysis', 'Pandas', 'NumPy', 'Excel']
                        score = max([skills_dict.get(skill, 0) for skill in da_skills] + [0])
                    elif radar_skill == 'Statistics':
                        stat_skills = ['Statistics', 'Statistical Modeling', 'A/B Testing']
                        score = max([skills_dict.get(skill, 0) for skill in stat_skills] + [0])
                    elif radar_skill == 'Communication':
                        # Âü∫‰∫éÁªèÈ™åÂπ¥Èôê‰º∞ÁÆó
                        score = min(50 + (profile['years_experience'] * 5), 100)
                    elif radar_skill == 'Domain Knowledge':
                        # Âü∫‰∫éÁªèÈ™åÂπ¥ÈôêÂíåË°å‰∏ö‰º∞ÁÆó
                        score = min(40 + (profile['years_experience'] * 4), 100)

                    radar_values.append(score)

                # ÂàõÂª∫Èõ∑ËææÂõæ
                fig = go.Figure()

                fig.add_trace(go.Scatterpolar(
                    r=radar_values,
                    theta=radar_skills,
                    fill='toself',
                    name='‰Ω†ÁöÑÊäÄËÉΩ',
                    line_color='#2E86AB'
                ))

                fig.update_layout(
                    polar=dict(
                        radialaxis=dict(
                            visible=True,
                            range=[0, 100]
                        )),
                    showlegend=True,
                    height=400
                )

                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("ËØ∑Ê∑ªÂä†ÊäÄËÉΩ‰ø°ÊÅØ‰ª•Êü•ÁúãÊäÄËÉΩÁîªÂÉè")

        with col2:
            st.subheader("üíº Â∏ÇÂú∫ÂØπÊØî")

            # Ëñ™ËµÑÂØπÊØîÂõæ
            comparison_data = {
                'Entry Level': 65000,
                'Mid Level': 85000,
                'Senior Level': 120000,
                'Expert Level': 160000,
                '‰Ω†ÁöÑÈ¢ÑÊµã': predicted_salary
            }

            colors = ['lightblue'] * 4 + ['darkblue']

            fig = px.bar(
                x=list(comparison_data.keys()),
                y=list(comparison_data.values()),
                title="Ëñ™ËµÑÊ∞¥Âπ≥ÂØπÊØî",
                color=colors,
                color_discrete_map="identity"
            )

            fig.update_layout(
                xaxis_title="ËÅå‰∏öÊ∞¥Âπ≥",
                yaxis_title="Ëñ™ËµÑ (USD)",
                height=400,
                showlegend=False
            )

            st.plotly_chart(fig, use_container_width=True)

        # AIËÅå‰∏öÂª∫ËÆÆ - Âç°ÁâáÂºèÂ∏ÉÂ±Ä
        st.markdown('<div class="sub-header">üß† AIËÅå‰∏öÂª∫ËÆÆ</div>', unsafe_allow_html=True)

        advice_data = generate_career_advice(profile, cluster_type, (predicted_salary, lower_bound, upper_bound),
                                             skills_data)

        # Âª∫ËÆÆÂç°Áâá
        col1, col2 = st.columns(2)

        with col1:
            st.markdown(f"""
            <div class="advice-card">
                <div class="advice-header">
                    {advice_data['icon']} Ê†∏ÂøÉ‰ºòÂäø
                </div>
                <div class="advice-content">
                    {advice_data['strengths']}
                </div>
            </div>
            """, unsafe_allow_html=True)

            st.markdown(f"""
            <div class="advice-card">
                <div class="advice-header">
                    üéØ ÂèëÂ±ïËÆ°Âàí
                </div>
                <div class="advice-content">
                    {advice_data['next_steps']}
                </div>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            st.markdown(f"""
            <div class="advice-card">
                <div class="advice-header">
                    üìà ÊäÄËÉΩË°•Âº∫
                </div>
                <div class="advice-content">
                    {advice_data['gaps']}
                </div>
            </div>
            """, unsafe_allow_html=True)

            # ÊäÄËÉΩÂàÜÊûê
            skill_analysis = ""
            if skills_data and any(skill['skill'] for skill in skills_data):
                high_skills = [s for s in skills_data if s['skill'] and s['proficiency'] >= 80]
                medium_skills = [s for s in skills_data if s['skill'] and 50 <= s['proficiency'] < 80]
                low_skills = [s for s in skills_data if s['skill'] and s['proficiency'] < 50]

                if high_skills:
                    skill_analysis += f"<strong>‰∏ìÈïøÊäÄËÉΩ:</strong> {', '.join([s['skill'] for s in high_skills])}<br>"
                if low_skills:
                    skill_analysis += f"<strong>ÂæÖÊèêÂçá:</strong> {', '.join([s['skill'] for s in low_skills])}"

            st.markdown(f"""
            <div class="advice-card">
                <div class="advice-header">
                    üí∞ Ëñ™ËµÑÊ¥ûÂØü
                </div>
                <div class="advice-content">
                    È¢ÑÊµãËñ™ËµÑ: ${predicted_salary:,.0f} (${lower_bound:,.0f} - ${upper_bound:,.0f})<br>
                    Â∏ÇÂú∫Ê∞¥Âπ≥: {'ËæÉÈ´ò' if predicted_salary > 90000 else '‰∏≠Á≠â' if predicted_salary > 70000 else 'ÂÖ•Èó®'}Ê∞¥Âπ≥<br>
                    {skill_analysis}
                </div>
            </div>
            """, unsafe_allow_html=True)

        # Â≠¶‰π†ËµÑÊ∫êÊé®Ëçê
        display_learning_resources(recommended_skills)

        # ÂØºÂá∫ÂäüËÉΩ
        st.markdown('<div class="sub-header">üì§ ÂØºÂá∫Êä•Âëä</div>', unsafe_allow_html=True)

        col1, col2 = st.columns(2)

        with col1:
            if st.button("üìã Â§çÂà∂ÂàÜÊûêÁªìÊûú"):
                skills_summary = ", ".join([f"{s['skill']}({s['proficiency']}%)" for s in skills_data if s['skill']])
                result_text = f"""
AI Career Compass ÂàÜÊûêÊä•Âëä

ËÅå‰∏öÁ±ªÂûã: {cluster_type}
È¢ÑÊµãËñ™ËµÑ: ${predicted_salary:,.0f}
Ëñ™ËµÑËåÉÂõ¥: ${lower_bound:,.0f} - ${upper_bound:,.0f}
ÁªèÈ™åÂπ¥Èôê: {profile['years_experience']} Âπ¥
Â≠¶ÂéÜ: {profile['education_required']} ({profile.get('school_tier', 'ÂÖ∂‰ªñ')})

ÊäÄËÉΩËÉåÊôØ: {skills_summary}

Ê†∏ÂøÉ‰ºòÂäø: {advice_data['strengths']}
ÊäÄËÉΩÂ∑ÆË∑ù: {advice_data['gaps']}
‰∏ã‰∏ÄÊ≠•Ë°åÂä®: {advice_data['next_steps']}
                """
                st.code(result_text)

        with col2:
            if st.button("üîÑ ÈáçÊñ∞ÂàÜÊûê"):
                st.session_state.analysis_complete = False
                st.rerun()


if __name__ == "__main__":
    main()